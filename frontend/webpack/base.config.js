/**
 * @file frontend.webpack.base.config.js
 * @author Panagiotis Tzimos.
 *
 * Base webpack settings to be inherited from
 * other settings like dev or prod.
 */

const
		webpack = require('webpack'),
		HtmlWebPackPlugin = require('html-webpack-plugin'),
		path = require('path'),
		ExtractTextPlugin = require('extract-text-webpack-plugin'),
		CleanObsoleteChunks = require('webpack-clean-obsolete-chunks'),
		CleanWebpackPlugin = require('clean-webpack-plugin'),
		WriteFilePlugin = require('write-file-webpack-plugin');

const htmlPlugin = new HtmlWebPackPlugin({
				template: './src/index.html'
		}),
		// excludes the [hash].hot-update.json autogenerated files
		write_file_plugin = new WriteFilePlugin({ test: /^(?!.*(hot)).*/, }),

		// Builds the css file for the correspondent bundle
		bundleExtractCss = new ExtractTextPlugin({ filename: '[name]/css/[name].css' }),

		// Cleans the created files from auto-reload.
		clean_obsolete_chunks = new CleanObsoleteChunks({ deep: true }),

		// Cleans the stale bundle files that exist at the destination folder
		clean_webpack_plugin = new CleanWebpackPlugin(
				{
						cleanStaleWebpackAssets: false,
						root: __dirname + '/../',
						watch: true,
				}
		),

		webpack_env = new webpack.EnvironmentPlugin([
				'NODE_ENV',
		]);


module.exports = {
		output: {
				publicPath: '/'
		},
		module: {
				rules: [
						{
								test: /\.css$/,
								use: ExtractTextPlugin.extract(
										{
												use: [
														'css-loader',
														'sass-loader',
														'css?modules&importLoaders=1&localIdentName=[hash:base64:5]&minimize'
												],

										})
						}, {
								test: /\.(png|jpg)$/,
								loader: 'url-loader'
						},
						{
								test: /\.scss$/,
								use: bundleExtractCss.extract(['css-loader', 'sass-loader'])
						},
						{
								test: /\.sass$/,
								use: [
										'css-loader',
										'sass-loader?indentedSyntax',
								],

						},
						{
								test: /\.(js|jsx)$/,
								exclude: /node_modules/,
								use: ['babel-loader']
						},
				]
		},
		plugins: [
				webpack_env,
				htmlPlugin,
				write_file_plugin,
				bundleExtractCss,
				clean_obsolete_chunks,
				clean_webpack_plugin
		]

};
